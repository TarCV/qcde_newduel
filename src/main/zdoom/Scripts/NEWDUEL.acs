#library "NEWDUEL"
#include "zcommon.acs"

#libdefine MAXPLAYERS 64
#libdefine MAXMATES 5
#libdefine NUMCHAMPS 20
#libdefine TICSPERSECOND 35
#libdefine USE_KEY "+qcduel_use"

global str 2:score1[];
global str 3:score2[];

world int 88:chosenClass[];
world int 87:duelPlayers[];
world int 86:roundActive;
world str 85:roundMapname;
world int 84:wins[];

#libdefine ROUND_INIT 0
#libdefine ROUND_COUNTDOWN 1
#libdefine ROUND_PREDRAFT 2
#libdefine ROUND_DRAFTING 3
#libdefine ROUND_WARMUP 4
#libdefine ROUND_PRESELECT_CHAMP 5
#libdefine ROUND_STARTED 6
#libdefine ROUND_ILLEGAL_STATE -1

#libdefine ON_OPEN 0
#libdefine ON_PLAYERS_PRESENT 1
#libdefine ON_PLAYERS_DRAFTED 2
#libdefine ON_ROUND_STARTED 3
#libdefine ON_ROUND_FINISHED 4
#libdefine ON_ROUND_ABORTED 5
#libdefine ON_WARMUP_FINISHED 6
#libdefine ON_PLAYER_DEATH 7
#libdefine ON_PLAYER_DISCONNECT 8

int champStatus[MAXMATES][2];
#libdefine STATUS_UNUSED 0
#libdefine STATUS_USED 1
#libdefine STATUS_DEAD 2

#libdefine AFTER_DRAFTING_PAUSE 3
#libdefine PRESELECT_TIME 10

#libdefine ITEM_ACTIVATED "QCDActivatedPlayer"
#libdefine ITEM_ACTIVATED_TOKEN "QCDActivatedPlayerToken"
#libdefine ITEM_DEACTIVATED "QCDNeutralizePlayer"
#libdefine ITEM_DEACTIVATED_EFFECT "QCDNeutralizePlayerEffect"
#libdefine ITEM_FROZEN "QCDFrozenPlayer"
#libdefine ITEM_NOTFROZEN "QCDUnfrozenPlayer"
#libdefine ITEM_NOTFROZEN_TOKEN "QCDUnfrozenPlayerToken"
#libdefine ITEM_RESPAWN_FINISHED "QCDRespawnFinished"

int serverSecret;
int champDraftingTime = 10;

str champions[NUMCHAMPS] = {
	"Ranger",
	"DoomSlayer",
	"Corvus",
	"Bitterman",
	"Galen",
	"Duke Nukem",
	"Sarge",
	"Grayson",
	"Kane",
	"Caleb",
	"Menelkir",
	"Nyx",
	"Durandal",
	"Lo Wang",
	"Terminator",
	"Zedek",
	"Inquisitor",
	"Sorgaul",
	"Keel",
	"Eradicator"
};
str championFaces[NUMCHAMPS] = {
	"PORTRA01",
	"PORTRA02",
	"PORTRA03",
	"PORTRA10",
	"PORTRA11",
	"PORTRA14",
	"PORTRA17",
	"PORTRA19",
	"PORTRA04",
	"PORTRA05",
	"PORTRA06",
	"PORTRA12",
	"PORTRA15",
	"PORTRA18",
	"PORTRA07",
	"PORTRA08",
	"PORTRA09",
	"PORTRA13",
	"PORTRA16",
	"PORTRA20"
};
str championSprites[NUMCHAMPS] = {
	"P01E8",
	"P02A1",
	"P03A1",
	"P10G1",
	"P11E1",
	"P14E1",
	"P17F1",
	"P19E1",
	"P04E1",
	"P05G1",
	"P06A1",
	"P12E1",
	"P15A1",
	"P18G1",
	"P07E1",
	"P08E1",
	"P09I1",
	"P13G1",
	"P16E1",
	"P20h1"
};

// Scales from DECORATE
int championScale[NUMCHAMPS] = {
    0.89,
    1.05,
    1.1,
    0.685,
    0.885,
    0.692,
    0.71,
    0.75,
    0.535,
    0.45,
    0.818,
    0.848,
    0.66,
    0.52,
    0.92,
    1.0,
    0.508,
    0.665,
    0.63,
    0.8
};

str champ_actions[MAXMATES] = {"+moveleft", "+forward", "+moveright", "+back", "+jump"};
int champ_buttons[MAXMATES] = {BT_MOVELEFT, BT_FORWARD, BT_MOVERIGHT, BT_BACK, BT_JUMP};

bool draftReady[2];
int whoDraftsNow = -1;
int whoDraftsFirst = 0;
int timeStarted = -1;
int champNum = -1;

/*
 * TODO:
 * - announcer for ending warmup, respawn and match time
 * - disable active abilities (and probably weapons) until player is activated
 * - fix ROUND_PRESELECT_CHAMP on 2nd and later rounds
 * - correctly handle the player being not the first player (score bug)
 */

Script "QCDE_InitLMS" (void)
{
    // Do not give health and weapons
}

Script "QCD_Event"(int type, int arg1, int arg2) Event {
    if (type == 5) {
        updateMatchStatus(ON_ROUND_STARTED);
	} if (type == 6) {
        updateMatchStatus(ON_ROUND_FINISHED);
    } else if (type == 7) {
        updateMatchStatus(ON_ROUND_ABORTED);
    }
}

function void updateMatchStatus (int when) {
	log(s:"updateMatchStatus started.");

    str currentMap = strparam(n:PRINTNAME_LEVEL);
    if (when == ON_OPEN && strcmp(roundMapname, currentMap) != 0) {
        wins[0] = 0;
        wins[1] = 0;
        roundMapname = currentMap;
        roundActive = ROUND_INIT;
    }
    if (when == ON_ROUND_STARTED) {
        when = ON_OPEN;
    }

	log(s:"state was ", i:roundActive, s:", event was ", i:when);
    int i;
    if (when == ON_PLAYER_DISCONNECT) {
        // no-op and just update clients at the end of this function
    } else if (roundActive == ROUND_INIT && when == ON_OPEN) {
        if (getGameModeState() == 2) {
            int pc = playerCount();
            if (pc >= 2) {
                int cursor = 0;
                for (i = 0; i < pc; ++i) {
                    if (playerIsSpectator(i) == 0) {
                        if (cursor >= 2) {
                            kickFromGame(i, "There can be only two");
                        } else {
                            duelPlayers[cursor] = i + 1;
                            draftReady[cursor] = false;
                            ++cursor;
                        }
                    }
                }
            }

            int warmupTime = getCVar("sv_duelcountdowntime");
            /* int minWarmup = MAXMATES * 5 + AFTER_DRAFTING_PAUSE;
            if (warmupTime < minWarmup) {
                log(s:"Server is configured incorrectly. Ask the administrator to set warmup to at least ", i:minWarmup, s:" seconds");
            } */
            champDraftingTime = (warmupTime - AFTER_DRAFTING_PAUSE) / MAXMATES;
            if (champDraftingTime < 5) champDraftingTime = 5;

            whoDraftsFirst = random(0, 1);
            whoDraftsNow = playerNumberForDuelIndex(whoDraftsFirst);
            ACS_NamedExecuteAlways("QCD_Draft_Refresh_Client", 0, playerNumberForDuelIndex(0), 0, whoDraftsNow);
            ACS_NamedExecuteAlways("QCD_Draft_Refresh_Client", 0, playerNumberForDuelIndex(1), 0, whoDraftsNow);
            champNum = getCVar("sv_maxlives") - 1;
            if (champNum <= 1) champNum = 3;

            roundActive = ROUND_DRAFTING;
		}
    } else if (roundActive == ROUND_DRAFTING && when == ON_OPEN) {
        // no op
	} else if (roundActive == ROUND_DRAFTING && when == ON_PLAYERS_DRAFTED) {
	    roundActive = ROUND_WARMUP;
    } else if (roundActive == ROUND_WARMUP && when == ON_WARMUP_FINISHED) {
		roundActive = ROUND_PRESELECT_CHAMP;
    } else if (ROUND_WARMUP <= roundActive && roundActive < ROUND_STARTED && when == ON_OPEN) {
        roundActive = ROUND_STARTED;
	} else if (roundActive == ROUND_STARTED && when == ON_OPEN) {
		// no-op: 2nd or 3rd round started, nothing to do
    } else if (when == ON_PLAYER_DEATH) { // can be fired during any round state
        if (roundActive == ROUND_STARTED) {
            bool foundUnused = false;
            int di = duelIndex();
            for (i = 0; i < MAXMATES && !foundUnused; ++i) {
                foundUnused = getChampStatus(di, i) == STATUS_UNUSED
                    && getPickedClass(di, i) >= 0;
            }
            if (!foundUnused) {
                wins[1 - di] += 1;
                SetPlayerLivesLeft(playerNumber(), 0);
                roundActive = ROUND_WARMUP;
            }
        }
	} else if (when == ON_ROUND_FINISHED || when == ON_ROUND_ABORTED) {
		// roundActive = ROUND_INIT;
	} else if (roundActive == ROUND_ILLEGAL_STATE) {
        // Intentionally empty
    } else {
        log(s:"New Duel system crashed. Please send the log and the demo to the author. (Tech data: state=",
            i:roundActive, s: ", event=", i:when, s:")");
		roundActive = ROUND_ILLEGAL_STATE;
	}

    ACS_NamedExecuteAlways("QCD_Refresh_Round", 0, roundActive, duelPlayers[0], duelPlayers[1]);
	log(s:"state became ", i:roundActive, s:", event was ", i:when);
	log(s:"updateMatchStatus ended");
}

Script "QCD_World_Loop" (void) {
	log(s:"World loop started");
	int lastRound = -1;

	int warmupTimeLimit = getCVar("sv_duelcountdowntime");
	if (warmupTimeLimit < 0) {
	    warmupTimeLimit = 0;
	} else if (warmupTimeLimit > 60) {
	    warmupTimeLimit = 60;
	}
	int warmupTimelimitTics = warmupTimeLimit * TICSPERSECOND;

	while (true) {
		if (lastRound != roundActive) {
			lastRound = roundActive;
            timeStarted = timer();
			switch (roundActive) {
				case ROUND_DRAFTING:
					ACS_NamedExecuteWait("QCD_WaitForDraftingCompletion", 0);
					killSafely(1000 + playerNumberForDuelIndex(0));
					killSafely(1000 + playerNumberForDuelIndex(1));
					updateMatchStatus(ON_PLAYERS_DRAFTED);
					break;
                case ROUND_PRESELECT_CHAMP:
					killSafely(1000 + playerNumberForDuelIndex(0));
					killSafely(1000 + playerNumberForDuelIndex(1));
					break;
                case ROUND_ILLEGAL_STATE:
                    log(s:"New Duel system crashed. Please send demo to the author");
                    break;
			}
		} else {
		    switch (roundActive) {
                case ROUND_WARMUP:
                {
                    int warmupTime = warmupTimelimitTics - (timer() - timeStarted);
                    if (warmupTime <= 0) {
                        updateMatchStatus(ON_WARMUP_FINISHED);
                        break;
                    }
                    hudmessagebold(s:"Match will start in ", i:(warmupTime/TICSPERSECOND + PRESELECT_TIME + 1), s:" seconds";
                        HUDMSG_PLAIN, 0, 0, 0.5, 0.5, 7.0 / TICSPERSECOND + 1);
                    break;
                }
                case ROUND_PRESELECT_CHAMP:
                {
                    int preselectTime = PRESELECT_TIME*TICSPERSECOND - (timer() - timeStarted);
                    if (preselectTime <= 0) {
                        log(s:"Resetting map");
                        ResetMap();
                    }
                    hudmessagebold(s:"Select the first champion for the upcoming round";
                                            HUDMSG_PLAIN, 0, 0, 0.5, 0.4, 7.0 / TICSPERSECOND + 1);
                    hudmessagebold(s:"Match will start in ", i:(preselectTime/TICSPERSECOND + 1), s:" seconds";
                        HUDMSG_PLAIN, 0, 0, 0.5, 0.5, 7.0 / TICSPERSECOND + 1);
                    break;
                }
		    }
        }
		delay(7);
	}
}

Script "QCD_Player_Loop" Enter {
	int lastRound = -1;
	bool activated;
	int pn = playerNumber();
	int di = duelIndex();
	int pt = playerTeam();
	int otherTeam = 1 - pt;
	int otherDi = 1 - di;
	int pointlimit = getCVar("winlimit");
	if (pointlimit <= 0) pointlimit = 1;

	while (playerIsSpectator(pn) == 0) {
		if (lastRound != roundActive) {
			lastRound = roundActive;
			switch (roundActive) {
				case ROUND_DRAFTING:
					activated = false;
					neutralizeMe();
					ACS_NamedExecuteAlways("QCD_ShowDraft", 0, champNum);
					ACS_NamedExecuteAlways("QCDE_Duel_Draft", 0);
					break;
			}
		}
		if (roundActive == ROUND_WARMUP && playerHealth() == 1) {
		    int mytid = activatorTID();
            if (mytid != 0) {
                killSafely(mytid);
            }
		}

        setInventory("Duel", 1);
        score1[pn] = strparam(i:wins[di]);
        score2[pn] = strparam(i:wins[otherDi]);
//        setInventory("Team1Score", wins[di] * 220 / pointlimit);
//        setInventory("Team2Score", wins[otherDi] * 220 / pointlimit);

        if (checkInventory(ITEM_RESPAWN_FINISHED) > 0) {
            if (checkInventory(ITEM_ACTIVATED_TOKEN) < 1) {
                log(s:"Neutralized bc not activated");
                neutralizeMe();
            }
            if (checkInventory(ITEM_NOTFROZEN_TOKEN) < 1) {
                log(s:"Frozen bc not unfrozen");
                SetPlayerProperty(0, ON, PROP_TOTALLYFROZEN);
            }
		}

		delay(7);
	}
	log(s:"Player loop finished");
}

Script "QCD_Open" Open {
    serverSecret = random(1000, 65535);

    for (int duelPlayer = 0; duelPlayer < 2; ++duelPlayer) {
        for (int champIndex = 0; champIndex < MAXMATES; ++champIndex) {
            ACS_NamedExecuteAlways("QCD_setPickedClass_Client", 0, duelPlayer, champIndex, getPickedClass(duelPlayer, champIndex));
            ACS_NamedExecuteAlways("QCD_setChampStatus_Client", 0, duelPlayer, champIndex, getChampStatus(duelPlayer, champIndex));
        }
    }
	updateMatchStatus(ON_OPEN);
	ACS_NamedExecute("QCD_World_Loop", 0);
}

Script "QCD_WaitForDraftingCompletion" (void) {
	while (!draftReady[0] && !draftReady[1]) {
		delay(17);
	}
	delay(AFTER_DRAFTING_PAUSE*TICSPERSECOND); // Give players a chance to see the final selection
}

// ch is "Q" - not selected, 'B' - row selected or 'R' - champion selected
function str championSprite(int index, str ch) {
    return strparam(s:ch, s:championSprites[index]);
}

function void setHudSizeForChampion(int champion, int width, int height) {
    setHudSize(
        scaleIntForChampion(champion, width),
        scaleIntForChampion(champion, height),
        false
    );
}
function int scaleIntForChampion(int champion, int value) {
    if (value >= 1.0 || value <= -1.0) log(s:"scaleIntForChampion warning:", d:value);
    if (champion < 0) return value;

    int result = fixedDiv(value * 1.0, championScale[champion]) / 1.0;
    return result;
}

int draftSelection[2];
Script "QCD_Draft_Preselect" (int secret, int di, int champion) NET {
    log(s:"QCD_Draft_Preselect ", s:"di", d:di, s:" champ=", d:champion);

    if (IsNetworkGame() && consolePlayerNumber() != -1) terminate;
    if (secret != serverSecret) terminate;
    if (playerNumberForDuelIndex(di) != whoDraftsNow) terminate;

    while (champion < 0) {
        champion += NUMCHAMPS;
    }
    champion = champion % NUMCHAMPS;
    while (findChosenFor(di, champion) >= 0) {
        champion += 1;
        champion = champion % NUMCHAMPS;
    }

    draftSelection[di] = champion;
    ACS_NamedExecuteAlways("QCD_Draft_Refresh_Client", 0, di, champion, whoDraftsNow);
}
Script "QCD_Draft_Select" (int secret, int sum, int champion) NET {
    int index = sum % MAXMATES;
    int di = sum / MAXMATES;
    int pn = playerNumberForDuelIndex(di);
    log(s:"QCD_Draft_Select ", s:"di", d:di, s:"index=", d:index, s:" champ=", d:champion);

    if (IsNetworkGame() && consolePlayerNumber() != -1) terminate;

    if (secret != serverSecret) terminate;
    if (pn != whoDraftsNow) terminate;
    if (index != getDraftCursor(di)) terminate;
    if (index >= champNum) terminate;
    if (!playerIsBot(pn) && findChosenFor(di, champion) >= 0) terminate;
    if (champion < 0 || champion >= NUMCHAMPS) terminate;

    if (getPickedClass(di, index) >= 0) terminate;

    log(s:"pick accepted");
    setPickedClass(di, index, champion);
    if ((whoDraftsFirst + di + index) % 2 == 0) {
        whoDraftsNow = otherPlayer();
    }
    ACS_NamedExecuteAlways("QCD_Draft_Refresh_Client", 0, di, champion, whoDraftsNow);
    ACS_NamedExecuteAlways("QCD_Draft_Preselect", 0, serverSecret, di, champion); // update selection
}
function int getDraftCursor(int di) {
    int draftCursor = champNum;
    for (int i = 0; i < champNum; ++i) {
        if (getPickedClass(di, i) < 0) {
            draftCursor = i;
            break;
        }
    }
    return draftCursor;
}
Script "QCDE_Duel_Draft" (void) {
	int di = duelIndex();
	int pn = playerNumber();

	resetPlayer(di); delay(7);
    ACS_NamedExecuteAlways("QCDE_Duel_Draft_Client", 0, serverSecret, champNum);

	while (!draftReady[di]) {
		if (whoDraftsNow == pn) {
            if (getDraftCursor(di) >= champNum) {
                draftReady[di] = true;
                continue;
            }

			if (playerIsBot(pn)) {
			    ACS_NamedExecuteAlways("QCD_Draft_Select", 0, serverSecret, di*MAXMATES + getDraftCursor(di), getPlayerInfo(pn, PLAYERINFO_PLAYERCLASS));
			} else {
                // add extra second to account for ping and lags:
				int draftingEnd = timer() + (champDraftingTime + 1)*TICSPERSECOND - 1;

                // selection rules are implemented in QCD_Draft_Preselect and QCD_Draft_Select

				while (true) {
					int timeLeft = draftingEnd - timer();

					if (timeLeft <= 0) {
					    ACS_NamedExecuteAlways("QCD_Draft_Select", 0, serverSecret, di*MAXMATES + getDraftCursor(di), draftSelection[di]);
						if (getDraftCursor(di) == 0) {
							setNextSpawnClass(draftSelection[di]);
						}
						break;
					}

					int timeLeftSeconds = timeLeft / TICSPERSECOND;
                    setHudSize(640, 480, true);
                    setFont("BIGFONT");
                    hudmessage(i:timeLeftSeconds;
                        HUDMSG_PLAIN, 0, 0, 86.0, 320.0, 5.0 / TICSPERSECOND + 1);
                    // TODO: play tick sound if seconds changed

					delay(5);
				}
			}
		}
		delay(5);
	}
}

Script "QCDE_Duel_Enter" Enter {
    if (getTeamProperty(playerTeam(), TPROP_NumPlayers) > 1) {
        kickFromGame(playerNumber(), "Only one player per team is allowed");
        terminate;
    }

	ACS_NamedExecuteAlways("QCDE_Duel_Respawn", 0);
}
Script "QCDE_Duel_Respawn" Respawn {
    setPlayerProperty(0, (roundActive != ROUND_STARTED), PROP_BUDDHA);

	if (roundActive != ROUND_STARTED
	  && roundActive != ROUND_WARMUP
	  && roundActive != ROUND_PRESELECT_CHAMP) terminate;

	int pn = playerNumber();
	int class = playerClass(pn);
	int chosenIndex = findChosen(class);
	int di = duelIndex();
	int i;
	bool isBot = playerIsBot(pn);
	bool validChampion = isBot || getChampStatus(di, chosenIndex) == STATUS_UNUSED;
	if (validChampion && roundActive != ROUND_PRESELECT_CHAMP) {
		if (!isBot) {
		    if (ROUND_WARMUP != roundActive) {
                setChampStatus(di, chosenIndex, STATUS_USED);
                for (i = 0; i < MAXMATES; ++i) {
                    if (getChampStatus(di, i) == STATUS_UNUSED) {
                        setNextSpawnClass(getPickedClass(di, i));
                        break;
                    }
                }
			}
		} else {
			for (i = 0; i < MAXMATES; ++i) {
				if (getPickedClass(di, i) >= 0 && getChampStatus(di, i) == STATUS_UNUSED) {
					setChampStatus(di, i, STATUS_USED);
					break;
				}
			}
		}
		SetPlayerProperty(0, OFF, PROP_TOTALLYFROZEN);
		giveInventory(ITEM_ACTIVATED, 1);
		giveInventory(ITEM_RESPAWN_FINISHED, 1);
	} else {
		giveInventory(ITEM_DEACTIVATED, 1);

		neutralizeMe();
		giveInventory(ITEM_RESPAWN_FINISHED, 1);
		delay(7);
		neutralizeMe();

        if (!isBot) {
            int mytid = activatorTID();
            ensurePlayerTid();
            if (playerHealth() > 0 && mytid != 0) {
                killSafely(mytid);
            }
            print(s:"Select a champion and press ", k:USE_KEY, s:" to spawn");
		}
	}
}

function void ensurePlayerTid(void) {
		int mytid = activatorTID();
		if (mytid == 0) {
			mytid = 1000 + playerNumber();
			while (isTidUsed(mytid)) {
				++mytid;
			}
			Thing_ChangeTID(0, mytid);
		}
}

function void killSafely(int playerTid) {
    if (playerTid == 0) {
        return;
    }
    int pn = playerTid - 1000;

    int oldActivator = activatorTID();
    setActivator(playerTid);
    setPlayerProperty(0, 0, PROP_BUDDHA);

	int newtid = uniqueTID();
	spawnForced("PlayerReintroducer", -30000.0, -30000.0, 0, newtid, 0);
	setActivator(newtid);
	SetPlayerLivesLeft(playerTid - 1000, GetPlayerLivesLeft(pn) + 1);
	thing_Damage2(playerTid, 9999, "PlayerRemoved");
	setActivator(oldActivator);
}

Script "QCDE_Duel_Death" Death
{
    takeInventory(ITEM_RESPAWN_FINISHED, 999);

    updateMatchStatus(ON_PLAYER_DEATH);
	if (roundActive != ROUND_STARTED
	  && roundActive != ROUND_WARMUP
	  && roundActive != ROUND_PRESELECT_CHAMP) terminate;

    int i;
	int di = duelIndex();

	bool canSpawn = false;
	int champIndex = -1;
	int pn = playerNumber();
    markUsedAsDead(di);

    if (playerIsBot(pn)) terminate;

	while (getActorProperty(0, APROP_HEALTH) <= 0) {
        int nextClass = getNextSpawnClass();

		if (roundActive != ROUND_PRESELECT_CHAMP) {
            for (i = 0; i < MAXMATES && !canSpawn; ++i) {
                canSpawn = (nextClass == getPickedClass(di, i) && getChampStatus(di, i) == STATUS_UNUSED);
            }
		} else {
		    canSpawn = false;
		}
		if (canSpawn) {
			if (checkInventory(ITEM_FROZEN) > 0) {
				giveInventory(ITEM_NOTFROZEN, 1);
			}
		} else {
			if (checkInventory(ITEM_NOTFROZEN) > 0) {
				giveInventory(ITEM_FROZEN, 1);
				neutralizeMe();
			}
		}

		int buttons = getPlayerInput(pn, INPUT_BUTTONS);
		for (i = 0; i < MAXMATES; ++i) {
			if (getChampStatus(di, i) != STATUS_UNUSED) continue;

			int iterClass = getPickedClass(di, i);

			if (buttons == champ_buttons[i]) {
				champIndex = i;
			}

			str selected1 = "";
			str selected2 = "";
			if (i == champIndex) {
				setNextSpawnClass(iterClass);
				nextClass = getNextSpawnClass();
			}
			if (nextClass == iterClass) {
				selected1 = "[";
				selected2 = "]";
			}

            setHudSizeForChampion(iterClass, 640, 480);
            setFont(championSprite(iterClass, "Q"));
			hudmessage(s:"A";
					HUDMSG_PLAIN, 0, 0,
					scaleIntForChampion(iterClass, 120 + 80*i) *1.0+0.1,
					scaleIntForChampion(iterClass, 360) *1.0+0.1,
					7.0 / TICSPERSECOND + 1);
            setHudSize(640, 480, true);
            setFont("SMALLFONT");
            setHudWrapWidth(80);
			hudmessage(s:selected1, k:champ_actions[i], s:selected2;
					HUDMSG_PLAIN, 0, 0, 120.4 + 80.0*i, 360.1, 7.0 / TICSPERSECOND + 1);
            setHudWrapWidth(0);
		}
		delay(7);
	}
}

Script "QCDE_Duel_Disconnect" (int gone) Disconnect {
	int di = duelIndexFor(gone);
	resetPlayer(di);
	duelPlayers[di] = 0;
	updateMatchStatus(ON_PLAYER_DISCONNECT);
}

function void neutralizeMe(void) {
	SetPlayerProperty(0, ON, PROP_TOTALLYFROZEN);
	if (playerHealth() > 0) {
		if (checkInventory(ITEM_DEACTIVATED_EFFECT) == 0) {
			giveInventory(ITEM_DEACTIVATED_EFFECT, 1);
		}
		setActorVelocity(0, 0, 0, 0, FALSE, FALSE);
	}
}

function int getNextSpawnClass(void) {
	str selected = getCVarString("qcd_champ");
	for (int i = 0; i < NUMCHAMPS; ++i) {
		if (strcmp(selected, champions[i]) == 0) return i;
	}
	return -1;
}
function void setNextSpawnClass(int class) {
	setCVarString("qcd_champ", idToClass(class));
	consoleCommand("playerclass $qcd_champ");
}

function int findChosen(int class) {
	return findChosenFor(duelIndex(), class);
}
function int findChosenFor(int di, int class) {
	if (class < 0) return -100;
	for (int i = 0; i < MAXMATES; ++i) {
		if (class == getPickedClass(duelIndex(), i)) return i;
	}
	return -1;
}

function str idToClass(int id) {
	if (id < 0) {
		return "-";
	}
	return champions[id];
}

function int duelIndex(void) {
	return duelIndexFor(playerNumber());
}
function int duelIndexFor(int pn) {
	if (pn == playerNumberForDuelIndex(0)) {
		return 0;
	} else if (pn == playerNumberForDuelIndex(1)) {
		return 1;
	}
	return -1000; // set to a stupid value to catch bugs
}

function int otherPlayer(void) {
	return playerNumberForDuelIndex(1 - duelIndex());
}

function int getPickedClass(int duelPlayer, int champIndex) {
	if (champIndex < 0 || champIndex >= MAXMATES) {
		return -100;
	}
	if (duelPlayer < 0 || duelPlayer >= 2) {
		return -100;
	}
	return chosenClass[MAXMATES*duelPlayer + champIndex];
}

function void setPickedClass(int duelPlayer, int champIndex, int newClass) {
	if (champIndex < 0 || champIndex >= MAXMATES) {
		return;
	}
	if (duelPlayer < 0 || duelPlayer >= 2) {
		return;
	}
	chosenClass[MAXMATES*duelPlayer + champIndex] = newClass;
    ACS_NamedExecuteAlways("QCD_setPickedClass_Client", 0, duelPlayer, champIndex, newClass);
}
function int getChampStatus(int duelPlayer, int champIndex) {
	if (champIndex < 0 || champIndex >= MAXMATES) {
		return -100;
	}
	if (duelPlayer < 0 || duelPlayer >= 2) {
		return -100;
	}
	int status = champStatus[champIndex][duelPlayer];

	if (STATUS_DEAD == status) return status;

    if (getPickedClass(duelPlayer, champIndex) < 0) return STATUS_DEAD;

    return status;
}

function void setChampStatus(int duelPlayer, int champIndex, int newStatus) {
	if (champIndex < 0 || champIndex >= MAXMATES) {
		return;
	}
	if (duelPlayer < 0 || duelPlayer >= 2) {
		return;
	}
	champStatus[champIndex][duelPlayer] = newStatus;
    ACS_NamedExecuteAlways("QCD_setChampStatus_Client", 0, duelPlayer, champIndex, newStatus);
}

function void resetPlayer(int duelPlayer) {
	for (int i = 0; i < MAXMATES; ++i) {
		setPickedClass(duelPlayer, i, -1);
		setChampStatus(duelPlayer, i, STATUS_UNUSED);
	}
}

function void markUsedAsDead(int di) {
    for (int i = 0; i < MAXMATES; ++i) {
        if (STATUS_USED == getChampStatus(di, i)) {
            setChampStatus(di, i, STATUS_DEAD);
        }
    }
}

function int playerNumberForDuelIndex(int di) {
    if (di > 1) return -1000;
    return duelPlayers[di] - 1;
}

function void setInventory(str name, int count) {
    int current = checkInventory(name);
    int diff = count - current;
    if (diff > 0) {
        giveInventory(name, diff);
    } else if (diff < 0) {
        takeInventory(name, -diff);
    }
}

function int sign(int value) {
    if (value > 0) {
        return 1;
    } else if (value < 0) {
        return -1;
    }
    return 0;
}
/**TEST_ONLY_SCRIPTS
    @Override
    protected void consoleCommand(String command) {
        Thing activator = activatorInternal();
        if (activator instanceof PlayerPawn && command.equals("playerclass $qcd_champ")) {
            String newClass = getCVarString("qcd_champ");
            for (int i = 0; i < champions.length; i++) {
                if (champions[i].equalsIgnoreCase(newClass)) {
                    setCVarAsConsole("playerclass", i);
                    return;
                }
            }
            throw new IllegalArgumentException("Class " + newClass + " was not found");
        } else {
            super.consoleCommand(command);
        }
    }
**/